package main.utils;

public enum Keys
{
	KEY_ENTER('\n'),
	KEY_BACK_SPACE('\b'),
	KEY_TAB('\t'),
	KEY_CANCEL(0x03),
	KEY_CLEAR(0x0C),
	KEY_SHIFT(0x10),
	KEY_CONTROL(0x11),
	KEY_ALT(0x12),
	KEY_PAUSE(0x13),
	KEY_CAPS_LOCK(0x14),
	KEY_ESCAPE(0x1B),
	KEY_SPACE(0x20),
	KEY_PAGE_UP(0x21),
	KEY_PAGE_DOWN(0x22),
	KEY_END(0x23),
	KEY_HOME(0x24),
	KEY_LEFT(0x25),
	KEY_UP(0x26),
	KEY_RIGHT(0x27),
	KEY_DOWN(0x28),
	KEY_COMMA(0x2C),
	KEY_MINUS(0x2D),
	KEY_PERIOD(0x2E),
	KEY_SLASH(0x2F),
	KEY_0(0x30),
	KEY_1(0x31),
	KEY_2(0x32),
	KEY_3(0x33),
	KEY_4(0x34),
	KEY_5(0x35),
	KEY_6(0x36),
	KEY_7(0x37),
	KEY_8(0x38),
	KEY_9(0x39),
	KEY_SEMICOLON(0x3B),
	KEY_EQUALS(0x3D),
	KEY_A(0x41),
	KEY_B(0x42),
	KEY_C(0x43),
	KEY_D(0x44),
	KEY_E(0x45),
	KEY_F(0x46),
	KEY_G(0x47),
	KEY_H(0x48),
	KEY_I(0x49),
	KEY_J(0x4A),
	KEY_K(0x4B),
	KEY_L(0x4C),
	KEY_M(0x4D),
	KEY_N(0x4E),
	KEY_O(0x4F),
	KEY_P(0x50),
	KEY_Q(0x51),
	KEY_R(0x52),
	KEY_S(0x53),
	KEY_T(0x54),
	KEY_U(0x55),
	KEY_V(0x56),
	KEY_W(0x57),
	KEY_X(0x58),
	KEY_Y(0x59),
	KEY_Z(0x5A),
	KEY_OPEN_BRACKET(0x5B),
	KEY_BACK_SLASH(0x5C),
	KEY_CLOSE_BRACKET(0x5D),
	KEY_NUMPAD0(0x60),
	KEY_NUMPAD1(0x61),
	KEY_NUMPAD2(0x62),
	KEY_NUMPAD3(0x63),
	KEY_NUMPAD4(0x64),
	KEY_NUMPAD5(0x65),
	KEY_NUMPAD6(0x66),
	KEY_NUMPAD7(0x67),
	KEY_NUMPAD8(0x68),
	KEY_NUMPAD9(0x69),
	KEY_MULTIPLY(0x6A),
	KEY_ADD(0x6B),
	KEY_SEPARATER(0x6C),
	KEY_SEPARATOR(0x6C),
	KEY_SUBTRACT(0x6D),
	KEY_DECIMAL(0x6E),
	KEY_DIVIDE(0x6F),
	KEY_DELETE(0x7F),
	KEY_NUM_LOCK(0x90),
	KEY_SCROLL_LOCK(0x91),
	KEY_F1(0x70),
	KEY_F2(0x71),
	KEY_F3(0x72),
	KEY_F4(0x73),
	KEY_F5(0x74),
	KEY_F6(0x75),
	KEY_F7(0x76),
	KEY_F8(0x77),
	KEY_F9(0x78),
	KEY_F10(0x79),
	KEY_F11(0x7A),
	KEY_F12(0x7B),
	KEY_F13(0xF000),
	KEY_F14(0xF001),
	KEY_F15(0xF002),
	KEY_F16(0xF003),
	KEY_F17(0xF004),
	KEY_F18(0xF005),
	KEY_F19(0xF006),
	KEY_F20(0xF007),
	KEY_F21(0xF008),
	KEY_F22(0xF009),
	KEY_F23(0xF00A),
	KEY_F24(0xF00B),
	KEY_PRINTSCREEN(0x9A),
	KEY_INSERT(0x9B),
	KEY_HELP(0x9C),
	KEY_META(0x9D),
	KEY_BACK_QUOTE(0xC0),
	KEY_QUOTE(0xDE),
	KEY_KP_UP(0xE0),
	KEY_KP_DOWN(0xE1),
	KEY_KP_LEFT(0xE2),
	KEY_KP_RIGHT(0xE3),
	KEY_DEAD_GRAVE(0x80),
	KEY_DEAD_ACUTE(0x81),
	KEY_DEAD_CIRCUMFLEX(0x82),
	KEY_DEAD_TILDE(0x83),
	KEY_DEAD_MACRON(0x84),
	KEY_DEAD_BREVE(0x85),
	KEY_DEAD_ABOVEDOT(0x86),
	KEY_DEAD_DIAERESIS(0x87),
	KEY_DEAD_ABOVERING(0x88),
	KEY_DEAD_DOUBLEACUTE(0x89),
	KEY_DEAD_CARON(0x8a),
	KEY_DEAD_CEDILLA(0x8b),
	KEY_DEAD_OGONEK(0x8c),
	KEY_DEAD_IOTA(0x8d),
	KEY_DEAD_VOICED_SOUND(0x8e),
	KEY_DEAD_SEMIVOICED_SOUND(0x8f),
	KEY_AMPERSAND(0x96),
	KEY_ASTERISK(0x97),
	KEY_QUOTEDBL(0x98),
	KEY_LESS(0x99),
	KEY_GREATER(0xa0),
	KEY_BRACELEFT(0xa1),
	KEY_BRACERIGHT(0xa2),
	KEY_AT(0x0200),
	KEY_COLON(0x0201),
	KEY_CIRCUMFLEX(0x0202),
	KEY_DOLLAR(0x0203),
	KEY_EURO_SIGN(0x0204),
	KEY_EXCLAMATION_MARK(0x0205),
	KEY_INVERTED_EXCLAMATION_MARK(0x0206),
	KEY_LEFT_PARENTHESIS(0x0207),
	KEY_NUMBER_SIGN(0x0208),
	KEY_PLUS(0x0209),
	KEY_RIGHT_PARENTHESIS(0x020A),
	KEY_UNDERSCORE(0x020B),
	KEY_WINDOWS(0x020C),
	KEY_CONTEXT_MENU(0x020D),
	KEY_FINAL(0x0018),
	KEY_CONVERT(0x001C),
	KEY_NONCONVERT(0x001D),
	KEY_ACCEPT(0x001E),
	KEY_MODECHANGE(0x001F),
	KEY_KANA(0x0015),
	KEY_KANJI(0x0019),
	KEY_ALPHANUMERIC(0x00F0),
	KEY_KATAKANA(0x00F1),
	KEY_HIRAGANA(0x00F2),
	KEY_FULL_WIDTH(0x00F3),
	KEY_HALF_WIDTH(0x00F4),
	KEY_ROMAN_CHARACTERS(0x00F5),
	KEY_ALL_CANDIDATES(0x0100),
	KEY_PREVIOUS_CANDIDATE(0x0101),
	KEY_CODE_INPUT(0x0102),
	KEY_JAPANESE_KATAKANA(0x0103),
	KEY_JAPANESE_HIRAGANA(0x0104),
	KEY_JAPANESE_ROMAN(0x0105),
	KEY_KANA_LOCK(0x0106),
	KEY_INPUT_METHOD_ON_OFF(0x0107),
	KEY_CUT(0xFFD1),
	KEY_COPY(0xFFCD),
	KEY_PASTE(0xFFCF),
	KEY_UNDO(0xFFCB),
	KEY_AGAIN(0xFFC9),
	KEY_FIND(0xFFD0),
	KEY_PROPS(0xFFCA),
	KEY_STOP(0xFFC8),
	KEY_COMPOSE(0xFF20),
	KEY_ALT_GRAPH(0xFF7E),
	KEY_BEGIN(0xFF58),
	KEY_UNDEFINED(0x0);

	public final int keyCode;
	public final char character;

	private Keys(int keyCode)
	{
		this.keyCode = keyCode;
		character = (char) keyCode;
	}

	public int getKeyCode()
	{
		return keyCode;
	}

	public char getChar()
	{
		return character;
	}

	public static Keys getKey(char code)
	{
		for (final Keys key : values())
			if (key.getChar() == code) return key;

		return null;
	}

	public static Keys getKey(int code)
	{
		for (final Keys key : values())
			if (key.getKeyCode() == code) return key;

		return null;
	}

	@Override
	public String toString()
	{
		final String n = name().replaceAll("KEY_", "").replaceAll("_", " ");
		return n.length() > 1 ? n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase() : n;
	}
}
